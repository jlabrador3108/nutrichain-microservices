


services:
  api-gateway:
    build: ./api-gateway
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    volumes:
      - ./api-gateway/src:/usr/src/app/src
    command: yarn start:dev
    environment:
      - PORT=${API_GATEWAY_PORT}

  product-db:
    container_name: product_database
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - ${PRODUCT_DB_PORT}:${PRODUCT_DB_PORT}
    volumes:
      - product_db_data:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${PRODUCT_DB_NAME}
      MYSQL_ROOT_USER: ${PRODUCT_DB_USERNAME}
      MYSQL_ROOT_PASSWORD: ${PRODUCT_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 3s
      retries: 20  

  elasticsearch:
    image: elasticsearch:8.11.3
    container_name: elasticsearch_
    restart: unless-stopped
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
      - '9300:9300'

  logstash:
    container_name: logstash_
    build:
      context: ./product-ms/logstash/
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - elasticsearch
    ports:
      - '9600:9600'
    environment:
      LS_JAVA_OPTS: '-Xmx4g -Xms4g'
    volumes:
      - logstash_data:/usr/share/logstash/data
    env_file:
      - ./product-ms/.env.logstash

  kibana:
    image: kibana:8.11.3
    container_name: kibana_
    restart: unless-stopped
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  kafka:
    image: bitnami/kafka:3.6.1-debian-11-r4
    container_name: kafka_
    ports:
      - '9092:9092'
      - '9093:9093'
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER  

  product-ms:
    container_name: product_ms
    depends_on:
      product-db:
        condition: service_healthy         
    build: ./product-ms
    ports:
      - ${PRODUCT_MS_PORT}:${PRODUCT_MS_PORT}
    volumes:
      - ./product-ms/src:/usr/src/app/src
    environment:
      - PORT=${PRODUCT_MS_PORT}
      - DB_HOST=${PRODUCT_DB_HOST}
      - DB_PORT=${PRODUCT_DB_PORT}
      - DB_USERNAME=${PRODUCT_DB_USERNAME}
      - DB_PASSWORD=${PRODUCT_DB_PASSWORD}
      - DB_NAME=${PRODUCT_DB_NAME}    

  mongodb:
    container_name: warehouse_mongodb
    image: mongo:6
    command: mongod --replSet rs0 --bind_ip_all
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db

  warehouse-ms:
    container_name: warehouse_ms
    depends_on:
      - mongodb  
    build: ./warehouse-ms
    ports:
      - ${WAREHOUSE_MS_PORT}:${WAREHOUSE_MS_PORT}
    volumes:
      - ./warehouse-ms/src:/usr/src/app/src
    environment:
      - PORT=${WAREHOUSE_MS_PORT}
      - MONGODB_URI=${WAREHOUSE_MONGODB_URI}  

  redis:
    image: redis:7.2-alpine
    container_name: redis_store
    ports:
      - "6379:6379"
    restart: always
    command: ["redis-server", "--appendonly", "yes", "--bind", "0.0.0.0"]

  store-ms:
    container_name: store_ms
    depends_on:
      - mongodb
      - redis  
    build: ./store-ms
    ports:
      - ${STORE_MS_PORT}:${STORE_MS_PORT}
    volumes:
      - ./store-ms/src:/usr/src/app/src
    environment:
      - PORT=${STORE_MS_PORT}
      - MONGODB_URI=${STORE_MONGODB_URI}
      - REDIS_HOST=${STORE_REDIS_HOST}
      - REDIS_PORT=${STORE_REDIS_PORT}
      - WAREHOUSE_MS_URL=${WAREHOUSE_MS_URL}

  php:
    build: ./reports-ms/docker/php
    volumes:
      - ./reports-ms:/var/www/html
    environment:
      - WAREHOUSE_MS_URL=${WAREHOUSE_MS_URL}
      - STORE_MS_URL=${STORE_MS_URL}
  nginx:
    build: ./reports-ms/docker/nginx
    ports:
      - "8088:80"
    depends_on: [php]
    volumes:
      - ./reports-ms:/var/www/html             

volumes:
  product_db_data:    
  elastic_data:
  logstash_data:
  kafka_data:
  mongodb_data:



  

  